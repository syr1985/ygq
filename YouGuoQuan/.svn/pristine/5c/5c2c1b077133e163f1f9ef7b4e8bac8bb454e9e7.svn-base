//
//  SCNavTabBarController.m
//  SCNavTabBarController
//
//  Created by ShiCang on 14/11/17.
//  Copyright (c) 2014年 SCNavTabBarController. All rights reserved.
//

#import "SCNavTabBarController.h"
#import "CommonMacro.h"
#import "SCNavTabBar.h"

@interface SCNavTabBarController () <UIScrollViewDelegate, SCNavTabBarDelegate>
{
    //NSInteger       _currentIndex;              // current page index
    NSMutableArray  *_titles;                   // array of children view controller's title
    
    SCNavTabBar     *_navTabBar;                // NavTabBar: press item on it to exchange view
    UIScrollView    *_mainView;                 // content view
}

@end

@implementation SCNavTabBarController

#pragma mark - Life Cycle
#pragma mark -

- (instancetype)initWithShowArrowButton:(BOOL)show {
    self = [super init];
    if (self) {
        _showArrowButton = show;
    }
    return self;
}

- (instancetype)initWithSubViewControllers:(NSArray *)subViewControllers {
    self = [super init];
    if (self) {
        _subViewControllers = subViewControllers;
    }
    return self;
}

- (instancetype)initWithParentViewController:(UIViewController *)viewController {
    self = [super init];
    if (self)
    {
        [self addParentController:viewController];
    }
    return self;
}

- (instancetype)initWithSubViewControllers:(NSArray *)subControllers andParentViewController:(UIViewController *)viewController showArrowButton:(BOOL)show {
    self = [self initWithSubViewControllers:subControllers];
    
    _showArrowButton = show;
    [self addParentController:viewController];
    return self;
}

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.    
    [self initConfig];
    [self viewInit];
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - Private Methods
#pragma mark -
- (void)initConfig {
    // Iinitialize value
    //    _currentIndex = 1;
    _navTabBarColor = _navTabBarColor ? _navTabBarColor : NavTabbarColor;
    
    // Load all title of children view controllers
    _titles = [[NSMutableArray alloc] initWithCapacity:_subViewControllers.count];
    for (UIViewController *viewController in _subViewControllers) {
        [_titles addObject:viewController.title];
    }
}

- (void)viewInit {
    // Load NavTabBar and content view to show on window
    CGFloat navTabbarY = DOT_COORDINATE;
    if (_navType == NavType_Hidden) {
        navTabbarY = STATUS_BAR_HEIGHT;
    } else if (_navType == NavType_Custom) {
        navTabbarY = STATUS_BAR_HEIGHT + NAVIGATION_BAR_HEIGHT;
    }
    __weak typeof(self) weakself = self;
    _navTabBar = [[SCNavTabBar alloc] initWithFrame:CGRectMake(DOT_COORDINATE, navTabbarY, SCREEN_WIDTH, NAVIGATION_BAR_HEIGHT) showArrowButton:_showArrowButton];
    _navTabBar.delegate = self;
    _navTabBar.backgroundColor = _navTabBarColor;
    _navTabBar.lineColor  = _navTabBarLineColor;
    _navTabBar.itemTitles = _titles;
    _navTabBar.arrowImage = _navTabBarArrowImage;
    _navTabBar.titleFont  = _titleFont;
    _navTabBar.isHomeFocusPage = _isHomeFocusPage;
    _navTabBar.showLoginPage = ^{
        UIStoryboard *loginSB = [UIStoryboard storyboardWithName:@"Login" bundle:nil];
        UIViewController *loginVC = [loginSB instantiateViewControllerWithIdentifier:@"LoginVC"];
        [weakself.navigationController presentViewController:loginVC animated:YES completion:nil];
    };
    [_navTabBar updateData];
    [self.view addSubview:_navTabBar];
    
    CGFloat viewY = CGRectGetMaxY(_navTabBar.frame);
    CGFloat viewH = SCREEN_HEIGHT - viewY - STATUS_BAR_HEIGHT - NAVIGATION_BAR_HEIGHT - TAB_TAB_HEIGHT;
    if (_navType == NavType_Hidden) {
        viewH = SCREEN_HEIGHT - viewY - TAB_TAB_HEIGHT;
    } else if (_navType == NavType_Custom) {
        viewH = SCREEN_HEIGHT - viewY - STATUS_BAR_HEIGHT - NAVIGATION_BAR_HEIGHT;
    }
    _mainView = [[UIScrollView alloc] initWithFrame:CGRectMake(DOT_COORDINATE, viewY, SCREEN_WIDTH, viewH)];
    _mainView.delegate = self;
    _mainView.pagingEnabled = YES;
    _mainView.bounces = _mainViewBounces;
    _mainView.showsHorizontalScrollIndicator = NO;
    _mainView.scrollEnabled = NO;
    _mainView.contentSize = CGSizeMake(SCREEN_WIDTH * _subViewControllers.count, DOT_COORDINATE);
    [self.view addSubview:_mainView];
    
    [self scrollToTabAtIndex:_defaultIndex];
}

#pragma mark - Public Methods
#pragma mark -
- (void)resetIndex {
    //1. 滚动scrollView offset.x == 0
    [self scrollToTabAtIndex:0];
    //2. 更改_navTabBar 的currentItemIndex更改状态
    _navTabBar.currentItemIndex = 0;
}


- (void)setNavTabbarColor:(UIColor *)navTabbarColor {
    // prevent set [UIColor clear], because this set can take error display
    CGFloat red, green, blue, alpha;
    if ([navTabbarColor getRed:&red green:&green blue:&blue alpha:&alpha] && !red && !green && !blue && !alpha) {
        navTabbarColor = NavTabbarColor;
    }
    _navTabBarColor = navTabbarColor;
}

- (void)addParentController:(UIViewController *)viewController {
    // Close UIScrollView characteristic on IOS7 and later
    if ([viewController respondsToSelector:@selector(edgesForExtendedLayout)]) {
        viewController.edgesForExtendedLayout = UIRectEdgeNone;
    }
    //self.view.backgroundColor = [UIColor redColor];
    [viewController addChildViewController:self];
    [viewController.view addSubview:self.view];
}

#pragma mark - Scroll View Delegate Methods
#pragma mark -
- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
    _currentIndex = scrollView.contentOffset.x / SCREEN_WIDTH;
}

#pragma mark - SCNavTabBarDelegate Methods
#pragma mark -
- (void)itemDidSelectedWithIndex:(NSInteger)index {
    _currentIndex = index;
    [self scrollToTabAtIndex:index];
}

- (void)scrollToTabAtIndex:(NSInteger)index {
    UIViewController *viewController = (UIViewController *)_subViewControllers[index];
    if ([viewController parentViewController] == nil) {
        [self addChildViewController:viewController];
    }
    if (![viewController isViewLoaded] || [viewController.view superview] == nil) {
        viewController.view.frame = CGRectMake(index * SCREEN_WIDTH, DOT_COORDINATE, SCREEN_WIDTH, _mainView.frame.size.height);
        [_mainView addSubview:viewController.view];
    }
    [_mainView setContentOffset:CGPointMake(index * SCREEN_WIDTH, DOT_COORDINATE) animated:_scrollAnimation];
}

- (void)shouldPopNavgationItemMenu:(BOOL)pop height:(CGFloat)height {
    if (pop) {
        [UIView animateWithDuration:0.5f animations:^{
            _navTabBar.frame = CGRectMake(_navTabBar.frame.origin.x, _navTabBar.frame.origin.y, _navTabBar.frame.size.width, height + NAV_TAB_BAR_HEIGHT);
        }];
    } else {
        [UIView animateWithDuration:0.5f animations:^{
            _navTabBar.frame = CGRectMake(_navTabBar.frame.origin.x, _navTabBar.frame.origin.y, _navTabBar.frame.size.width, NAV_TAB_BAR_HEIGHT);
        }];
    }
    [_navTabBar refresh];
}

@end

