//
//  NSString+emoji.m
//  YouGuoQuan
//
//  Created by YM on 2016/12/14.
//  Copyright © 2016年 NT. All rights reserved.
//

#import "NSString+emoji.h"

@implementation NSString (emoji)

+ (BOOL)stringContainsEmoji:(NSString *)string {
    __block BOOL returnValue = NO;
    [string enumerateSubstringsInRange:NSMakeRange(0, [string length])
                               options:NSStringEnumerationByComposedCharacterSequences
                            usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
                                //                                NSLog(@"%@",substring);
                                //                                NSLog(@"%ld,%ld",substringRange.location,substringRange.length);
                                //                                NSLog(@"%ld,%ld",enclosingRange.location,enclosingRange.length);
                                const unichar hs = [substring characterAtIndex:0];
                                if (0xd800 <= hs && hs <= 0xdbff) {
                                    if (substring.length > 1) {
                                        const unichar ls = [substring characterAtIndex:1];
                                        const int uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;
                                        if (0x1d000 <= uc && uc <= 0x1f77f) {
                                            returnValue = YES;
                                        }
                                    }
                                } else if (substring.length > 1) {
                                    const unichar ls = [substring characterAtIndex:1];
                                    if (ls == 0x20e3) {
                                        returnValue = YES;
                                    }
                                } else {
                                    if (0x2100 <= hs && hs <= 0x27ff) {
                                        returnValue = YES;
                                    } else if (0x2B05 <= hs && hs <= 0x2b07) {
                                        returnValue = YES;
                                    } else if (0x2934 <= hs && hs <= 0x2935) {
                                        returnValue = YES;
                                    } else if (0x3297 <= hs && hs <= 0x3299) {
                                        returnValue = YES;
                                    } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030 || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b || hs == 0x2b50) {
                                        returnValue = YES;
                                    }
                                }
                            }];
    
    return returnValue;
}

// /iface/comment/createaboutCommentId=aboutId=93d5b45a-e0bd-4b28-acc4-c1f0d45ae913aboutUserId=0f188a3d-4529-40a7-9d37-ffb288b19e5dcommentContent=\Ud83d\Ude03\Ud83d\Ude0dfromUserId=0f188a3d-4529-40a7-9d37-ffb288b19e5dfromUserNickName=wwwwrequestseq=7gKqL
// /iface/comment/createaboutCommentId=aboutId=93d5b45a-e0bd-4b28-acc4-c1f0d45ae913aboutUserId=0f188a3d-4529-40a7-9d37-ffb288b19e5dcommentContent=\Ud83d\Ude03\Ud83d\Ude0dfromUserId=0f188a3d-4529-40a7-9d37-ffb288b19e5dfromUserNickName=wwwwrequestseq=7gKqL

+ (NSString *)convertStringContainsEmoji:(NSString *)string {
    __block BOOL returnValue = NO;
    __block NSString *newString = @"";
    __weak typeof(self) weakself = self;
    [string enumerateSubstringsInRange:NSMakeRange(0, [string length])
                               options:NSStringEnumerationByComposedCharacterSequences
                            usingBlock:^(NSString *substring, NSRange substringRange, NSRange enclosingRange, BOOL *stop) {
                                //                                NSLog(@"%@",substring);
                                //                                NSLog(@"%ld,%ld",substringRange.location,substringRange.length);
                                //                                NSLog(@"%ld,%ld",enclosingRange.location,enclosingRange.length);
                                
                                NSString *newSubString = substring;
                                const unichar hs = [substring characterAtIndex:0];
                                if (0xd800 <= hs && hs <= 0xdbff) {
                                    if (substring.length > 1) {
                                        const unichar ls = [substring characterAtIndex:1];
                                        const int uc = ((hs - 0xd800) * 0x400) + (ls - 0xdc00) + 0x10000;
                                        if (0x1d000 <= uc && uc <= 0x1f77f) {
                                            newSubString = [weakself utf8ToUnicode:substring];
                                            returnValue = YES;
                                        }
                                    }
                                } else if (substring.length > 1) {
                                    const unichar ls = [substring characterAtIndex:1];
                                    if (ls == 0x20e3) {
                                        newSubString = [weakself utf8ToUnicode:substring];
                                        returnValue = YES;
                                    }
                                } else {
                                    if (0x2100 <= hs && hs <= 0x27ff) {
                                        newSubString = [weakself utf8ToUnicode:substring];
                                        returnValue = YES;
                                    } else if (0x2B05 <= hs && hs <= 0x2b07) {
                                        newSubString = [weakself utf8ToUnicode:substring];
                                        returnValue = YES;
                                    } else if (0x2934 <= hs && hs <= 0x2935) {
                                        newSubString = [weakself utf8ToUnicode:substring];
                                        returnValue = YES;
                                    } else if (0x3297 <= hs && hs <= 0x3299) {
                                        newSubString = [weakself utf8ToUnicode:substring];
                                        returnValue = YES;
                                    } else if (hs == 0xa9 || hs == 0xae || hs == 0x303d || hs == 0x3030 || hs == 0x2b55 || hs == 0x2b1c || hs == 0x2b1b || hs == 0x2b50) {
                                        newSubString = [weakself utf8ToUnicode:substring];
                                        returnValue = YES;
                                    }
                                }
                                
                                newString = [newString stringByAppendingString:newSubString];
                                
                            }];
    
    return newString;
}

+ (NSString *)utf8ToUnicode:(NSString *)string {
    NSUInteger length = [string length];
    NSMutableString *s = [NSMutableString stringWithCapacity:0];
    for (int i = 0;i < length; i++) {
        unichar _char = [string characterAtIndex:i];
        //判断是否为英文和数字
        if (_char <= '9' && _char >= '0')
        {
            [s appendFormat:@"%@",[string substringWithRange:NSMakeRange(i, 1)]];
        }
        else if(_char >= 'a' && _char <= 'z')
        {
            [s appendFormat:@"%@",[string substringWithRange:NSMakeRange(i, 1)]];
        }
        else if(_char >= 'A' && _char <= 'Z')
        {
            [s appendFormat:@"%@",[string substringWithRange:NSMakeRange(i, 1)]];
        }
        else
        {
            [s appendFormat:@"\\U%x",[string characterAtIndex:i]];
        }
    }
    return s;
}


@end
