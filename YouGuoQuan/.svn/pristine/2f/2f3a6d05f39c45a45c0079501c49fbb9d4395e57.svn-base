//
//  SCNavTabBar.m
//  SCNavTabBarController
//
//  Created by ShiCang on 14/11/17.
//  Copyright (c) 2014å¹´ SCNavTabBarController. All rights reserved.
//

#import "SCNavTabBar.h"
#import "CommonMacro.h"
#import "SCPopView.h"

@interface SCNavTabBar () <SCPopViewDelegate>
{
    UIScrollView    *_navgationTabBar;      // all items on this scroll view
    UIImageView     *_arrowButton;          // arrow button
    
    UIView          *_line;                 // underscore show which item selected
    SCPopView       *_popView;              // when item menu, will show this view
    
    NSMutableArray  *_items;                // SCNavTabBar pressed item
    NSArray         *_itemsWidth;           // an array of items' width
    BOOL            _showArrowButton;       // is showed arrow button
    BOOL            _popItemMenu;           // is needed pop item menu
    UIButton        *_selectButton;
    
    BOOL            _bShowLine;
}

@end

@implementation SCNavTabBar

- (instancetype)init {
    if (self = [super init]) {
        _showArrowButton = false;
        _bShowLine = false;
        [self initConfig];
    }
    return self;
}

- (instancetype)initWithFrame:(CGRect)frame showArrowButton:(BOOL)show {
    self = [super initWithFrame:frame];
    if (self) {
        _showArrowButton = show;
        [self initConfig];
    }
    return self;
}

- (instancetype)initWithFrame:(CGRect)frame showArrowButton:(BOOL)show showLine:(BOOL)showLine {
    self = [super initWithFrame:frame];
    if (self) {
        _showArrowButton = show;
        _bShowLine = showLine;
        [self initConfig];
    }
    return self;
}

#pragma mark -
#pragma mark - Private Methods

- (void)initConfig {
    _titleFont = [UIFont systemFontOfSize:15];
    _items = [@[] mutableCopy];
    _arrowImage = [UIImage imageNamed:SCNavTabbarSourceName(@"arrow.png")];
    
    [self viewConfig];
    //[self addTapGestureRecognizer];
}

- (void)viewConfig {
    CGFloat functionButtonX = _showArrowButton ? (SCREEN_WIDTH - ARROW_BUTTON_WIDTH) : SCREEN_WIDTH;
    if (_showArrowButton) {
        _arrowButton = [[UIImageView alloc] initWithFrame:CGRectMake(functionButtonX, DOT_COORDINATE, ARROW_BUTTON_WIDTH, ARROW_BUTTON_WIDTH)];
        _arrowButton.layer.shadowColor = [UIColor lightGrayColor].CGColor;
        _arrowButton.image = _arrowImage;
        _arrowButton.userInteractionEnabled = YES;
        [self addSubview:_arrowButton];
        [self viewShowShadow:_arrowButton shadowRadius:20.0f shadowOpacity:20.0f];
        
        //        UITapGestureRecognizer *tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self
        //                                                                                     action:@selector(functionButtonPressed)];
        //        [_arrowButton addGestureRecognizer:tapGesture];
    }
    
    _navgationTabBar = [[UIScrollView alloc] initWithFrame:CGRectMake(DOT_COORDINATE, DOT_COORDINATE, functionButtonX, NAV_TAB_BAR_HEIGHT)];
    _navgationTabBar.showsHorizontalScrollIndicator = NO;
    [self addSubview:_navgationTabBar];
    
    //[self viewShowShadow:self shadowRadius:10.0f shadowOpacity:10.0f];
}

- (void)showLineWithButtonWidth:(CGFloat)width {
    _line = [[UIView alloc] initWithFrame:CGRectMake(2.0f, NAV_TAB_BAR_HEIGHT - 3.0f, width - 4.0f, 3.0f)];
    _line.backgroundColor = UIColorWithRGBA(63.0f, 185.0f, 80.0f, 0.7f);
    [_navgationTabBar addSubview:_line];
}

- (void)contentWidthAndAddNavTabBarItemsWithButtonsWidth:(NSArray *)widths {
    CGFloat buttonX = DOT_COORDINATE;
    for (NSInteger index = 0; index < [_itemTitles count]; index++) {
        UIButton *button = [UIButton buttonWithType:UIButtonTypeCustom];
        button.frame = CGRectMake(buttonX, DOT_COORDINATE, [widths[index] floatValue], NAV_TAB_BAR_HEIGHT);
        button.titleLabel.font = _titleFont;
        [button setTitle:_itemTitles[index] forState:UIControlStateNormal];
        [button setTitleColor:[UIColor lightGrayColor] forState:UIControlStateNormal];
        [button setTitleColor:[UIColor blackColor] forState:UIControlStateSelected];
        [button addTarget:self action:@selector(itemPressed:) forControlEvents:UIControlEventTouchUpInside];
        [_navgationTabBar addSubview:button];
        
        if (!_bHandleItem) {
            if (index == 0) {
                button.selected = true;
                _selectButton = button;
            }
        }
        
        [_items addObject:button];
        buttonX += [widths[index] floatValue];
    }
    
    if (_bShowLine) {
        [self showLineWithButtonWidth:[widths[0] floatValue]];
    }
    
    _navgationTabBar.contentSize = CGSizeMake(buttonX, NAVIGATION_BAR_HEIGHT);
}

//- (void)addTapGestureRecognizer {
//    UITapGestureRecognizer *tapGestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(functionButtonPressed)];
//    [_arrowButton addGestureRecognizer:tapGestureRecognizer];
//}

- (void)itemPressed:(UIButton *)button {
    if (_selectButton != button) {
        if (!_bHandleItem) {
            button.selected = !button.isSelected;
            for (UIButton *btn in _items) {
                if (![btn isEqual:button]) {
                    btn.selected = NO;
                }
            }
            _selectButton = button;
        }
        
        NSInteger index = [_items indexOfObject:button];
        [_delegate itemDidSelectedWithIndex:index];
    }
}

//- (void)functionButtonPressed {
//    _popItemMenu = !_popItemMenu;
//    [_delegate shouldPopNavgationItemMenu:_popItemMenu height:[self popMenuHeight]];
//}

- (NSArray *)getButtonsWidthWithTitles:(NSArray *)titles {
    NSMutableArray *widths = [@[] mutableCopy];
    CGFloat m_width = SCREEN_WIDTH / titles.count;
    for (NSString *title in titles)
    {
        CGSize size = [title sizeWithAttributes:@{NSFontAttributeName:[UIFont systemFontOfSize:[UIFont systemFontSize]]}];
        CGFloat sizeWidth = size.width;
        
        if (sizeWidth > m_width) {
            sizeWidth += 40.0f;
        } else {
            sizeWidth = m_width;
        }
        NSNumber *width = [NSNumber numberWithFloat:sizeWidth];
        [widths addObject:width];
    }
    
    return widths;
}

- (void)viewShowShadow:(UIView *)view shadowRadius:(CGFloat)shadowRadius shadowOpacity:(CGFloat)shadowOpacity {
    view.layer.shadowRadius = shadowRadius;
    view.layer.shadowOpacity = shadowOpacity;
}

- (CGFloat)popMenuHeight {
    CGFloat buttonX = DOT_COORDINATE;
    CGFloat buttonY = ITEM_HEIGHT;
    CGFloat maxHeight = SCREEN_HEIGHT - STATUS_BAR_HEIGHT - NAVIGATION_BAR_HEIGHT - NAV_TAB_BAR_HEIGHT;
    for (NSInteger index = 0; index < [_itemsWidth count]; index++)
    {
        buttonX += [_itemsWidth[index] floatValue];
        
        @try {
            if ((buttonX + [_itemsWidth[index + 1] floatValue]) >= SCREEN_WIDTH)
            {
                buttonX = DOT_COORDINATE;
                buttonY += ITEM_HEIGHT;
            }
        }
        @catch (NSException *exception) {
            
        }
        @finally {
            
        }
    }
    
    buttonY = (buttonY > maxHeight) ? maxHeight : buttonY;
    return buttonY;
}

- (void)popItemMenu:(BOOL)pop {
    if (pop) {
        [self viewShowShadow:_arrowButton shadowRadius:DOT_COORDINATE shadowOpacity:DOT_COORDINATE];
        [UIView animateWithDuration:0.5f animations:^{
            _navgationTabBar.hidden = YES;
            _arrowButton.transform = CGAffineTransformMakeRotation(M_PI);
        } completion:^(BOOL finished) {
            [UIView animateWithDuration:0.2f animations:^{
                if (!_popView)
                {
                    _popView = [[SCPopView alloc] initWithFrame:CGRectMake(DOT_COORDINATE, NAVIGATION_BAR_HEIGHT, SCREEN_WIDTH, self.frame.size.height - NAVIGATION_BAR_HEIGHT)];
                    _popView.delegate = self;
                    _popView.itemNames = _itemTitles;
                    [self addSubview:_popView];
                }
                _popView.hidden = NO;
            }];
        }];
    } else {
        [UIView animateWithDuration:0.5f animations:^{
            _popView.hidden = !_popView.hidden;
            _arrowButton.transform = CGAffineTransformIdentity;
        } completion:^(BOOL finished) {
            _navgationTabBar.hidden = !_navgationTabBar.hidden;
            [self viewShowShadow:_arrowButton shadowRadius:20.0f shadowOpacity:20.0f];
        }];
    }
}

#pragma mark -
#pragma mark - Public Methods
- (void)setArrowImage:(UIImage *)arrowImage {
    _arrowImage = arrowImage ? arrowImage : _arrowImage;
    _arrowButton.image = _arrowImage;
}

- (void)setCurrentItemIndex:(NSInteger)currentItemIndex {
    _currentItemIndex = currentItemIndex;
    UIButton *button = _items[currentItemIndex];
    button.selected = YES;
    _selectButton = button;
    
    CGFloat flag = _showArrowButton ? (SCREEN_WIDTH - ARROW_BUTTON_WIDTH) : SCREEN_WIDTH;
    
    if (button.frame.origin.x + button.frame.size.width > flag) {
        CGFloat offsetX = button.frame.origin.x + button.frame.size.width - flag;
        if (_currentItemIndex < [_itemTitles count] - 1) {
            offsetX = offsetX + 40.0f;
        }
        
        [_navgationTabBar setContentOffset:CGPointMake(offsetX, DOT_COORDINATE) animated:YES];
    } else {
        [_navgationTabBar setContentOffset:CGPointMake(DOT_COORDINATE, DOT_COORDINATE) animated:YES];
    }
    
    //    [UIView animateWithDuration:0.2f animations:^{
    //        _line.frame = CGRectMake(button.frame.origin.x + 2.0f, _line.frame.origin.y, [_itemsWidth[currentItemIndex] floatValue] - 4.0f, _line.frame.size.height);
    //    }];
}

- (void)updateData {
    if (_showArrowButton) {
        _arrowButton.backgroundColor = self.backgroundColor;
    }
    
    _itemsWidth = [self getButtonsWidthWithTitles:_itemTitles];
    if (_itemsWidth.count) {
        [self contentWidthAndAddNavTabBarItemsWithButtonsWidth:_itemsWidth];
    }
}

- (void)refresh {
    [self popItemMenu:_popItemMenu];
}

#pragma mark - SCFunctionView Delegate Methods
- (void)itemPressedWithIndex:(NSInteger)index {
    //[self functionButtonPressed];
    [_delegate itemDidSelectedWithIndex:index];
}

@end

