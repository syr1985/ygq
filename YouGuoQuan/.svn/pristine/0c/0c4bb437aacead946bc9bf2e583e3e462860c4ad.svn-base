//
//  CityLocation.m
//  YouGuoQuan
//
//  Created by YM on 2016/11/7.
//  Copyright © 2016年 NT. All rights reserved.
//

#import "CityLocation.h"
#import <UIKit/UIKit.h>
#import "CityHelp.h"

@interface CityLocation () <CLLocationManagerDelegate>
@property (strong, nonatomic) CLLocationManager *locationManager;
@property (nonatomic, assign) BOOL updated;
@end

@implementation CityLocation

static CityLocation *_instance;

+ (instancetype)allocWithZone:(struct _NSZone *)zone {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _instance = [super allocWithZone:zone];
    });
    return _instance;
}

+ (instancetype)sharedInstance {
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _instance = [[self alloc] init];
    });
    return _instance;
}

- (id)copyWithZone:(NSZone *)zone {
    return _instance;
}

- (void)setCoordinate:(CLLocationCoordinate2D)coordinate {
    _coordinate = coordinate;
    
    if (_city && [LoginData sharedLoginData].userId) {
        NSString *lat = [NSString stringWithFormat:@"%f",coordinate.latitude];
        NSString *lon = [NSString stringWithFormat:@"%f",coordinate.longitude];
        __weak typeof(self) weakself = self;
        [NetworkTool updateUserLocationInfoWithCity:_city latitude:lat longitude:lon success:^{
            if (weakself.uploadCoordinateSuccess) {
                weakself.uploadCoordinateSuccess();
            }
        } failure:nil];
    }
}

- (void)startLocation {
    self.updated = YES;
    if([CLLocationManager locationServicesEnabled]) {
        if (!_locationManager) {
            _locationManager = [[CLLocationManager alloc] init];
            _locationManager.delegate = self;
            [_locationManager setDesiredAccuracy:kCLLocationAccuracyBest];
            [_locationManager requestWhenInUseAuthorization];
        }
        // 开始时时定位
        [_locationManager startUpdatingLocation];
    } else {
        //提示用户无法进行定位操作
        [SVProgressHUD showInfoWithStatus:@"请确认手机开启定位功能"];
        if (_locationFailed) {
            _locationFailed();
        }
    }
}

#pragma mark - CLLocationManagerDelegate
- (void)locationManager:(CLLocationManager *)manager didFailWithError:(NSError *)error {
    if (_locationFailed) {
        _locationFailed();
    }
    [CityHelp updateCitiesForLocation:@"重新定位"];
    
    if (error.code == kCLErrorDenied) {
        //访问被拒绝
        [SVProgressHUD showInfoWithStatus:@"请在设置-尤果Q-位置中设置允许访问位置信息！"];
    }
}

// 6.0 以上调用这个函数
- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {
    [manager stopUpdatingLocation];
    
    CLLocation *currentLocation = [locations lastObject];
    //------------------位置反编码---5.0之后使用-----------------
    __block __weak typeof(self) weakself = self;
    CLGeocoder *geocoder = [[CLGeocoder alloc] init];
    [geocoder reverseGeocodeLocation:currentLocation
                   completionHandler:^(NSArray *placemarks, NSError *error) {
                       if (weakself.updated) {
                           if (placemarks.count) {
                               CLPlacemark *place = [placemarks firstObject];
                               NSDictionary *test = [place addressDictionary];
                               NSString *locationCity = [test objectForKey:@"City"];
                               if (locationCity) {
                                   if ([locationCity hasSuffix:@"市"]) {
                                       locationCity = [locationCity substringToIndex:locationCity.length - 1];
                                   }
                                   //CLLocationCoordinate2D coordinate = currentLocation.coordinate;
                                   weakself.city = locationCity;
                                   
                                   if (weakself.locationSuccess) {
                                       weakself.locationSuccess(locationCity);
                                   }
                                   
                                   if (weakself.getCoordinate) {
                                       weakself.getCoordinate(weakself.coordinate);
                                   }
                                   
                                   [CityHelp updateCitiesForLocation:locationCity];
                                   
                                   weakself.updated = NO;
                               }
                           }
                       }
                   }];
}

- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status {
    switch (status) {
        case kCLAuthorizationStatusDenied :
        {
            //提示用户出错原因，可按住Option键点击 KCLErrorDenied的查看更多出错信息，可打印error.code值查找原因所在
            [SVProgressHUD showInfoWithStatus:@"请在设置-隐私-定位服务中开启定位功能！"];
        }
            break;
        case kCLAuthorizationStatusNotDetermined:
        {
            // Note: Xcode6才有的方法，所以会有警告
            if ([manager respondsToSelector:@selector(requestWhenInUseAuthorization)]) {
                [manager requestWhenInUseAuthorization];
            }
        }
            break;
        case kCLAuthorizationStatusRestricted:
        {
            // 提示用户出错原因，可按住Option键点击 KCLErrorDenied的查看更多出错信息，可打印error.code值查找原因所在
            [SVProgressHUD showInfoWithStatus:@"定位服务无法使用！"];
        }
        default:
            break;
    }
}

@end
