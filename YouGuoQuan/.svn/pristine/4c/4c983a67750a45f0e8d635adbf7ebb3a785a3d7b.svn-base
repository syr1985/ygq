//
//  ChooseLocationViewController.m
//  YouGuoQuan
//
//  Created by liushuai on 2017/1/1.
//  Copyright © 2017年 NT. All rights reserved.
//

#import <CoreLocation/CoreLocation.h>
#import <MapKit/MapKit.h>
#import "ChooseLocationViewController.h"
#import "HelperUtil.h"
#import "UIViewController+HUD.h"

@interface ChooseLocationViewController ()<UISearchBarDelegate, MKMapViewDelegate, CLLocationManagerDelegate, UITableViewDelegate, UITableViewDataSource> {
    CGFloat _screenWidth;
}
@property(nonatomic, strong) MKMapView *mapView;
@property(nonatomic, strong) MKPointAnnotation *annotation;
@property(nonatomic, strong) CLLocationManager *locationManager;
@property(nonatomic) MKMapItem  *currentMapItem;
@property(nonatomic, strong) CLLocation *locatedLocation;
@property(nonatomic)  BOOL isSendLocation;
@property(nonatomic, strong) UISearchBar *searchBar;
@property(nonatomic, strong) UIView *tableHeaderView;
@property(nonatomic, strong) NSMutableArray *locationArray;
@end

@implementation ChooseLocationViewController

- (instancetype)initWithLocation:(CLLocationCoordinate2D)locationCoordinate {
    self = [super init];
    if (self) {
        _isSendLocation = NO;
        //        _currentLocationCoordinate = locationCoordinate;
    }
    
    return self;
}

- (void)dealloc {
    NSLog(@"%s",__func__);
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.locationArray = [[NSMutableArray alloc] init];
    _screenWidth = [UIScreen mainScreen].bounds.size.width;
    self.tableView.rowHeight = 56;
    self.tableView.dataSource = self;
    self.tableView.delegate = self;
    [self setUpNavBar];
    [self setUpUI];
    [self startLocation];
    UITapGestureRecognizer *tap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(actionEndEditing)];
    [self.mapView setUserInteractionEnabled:YES];
    [self.mapView addGestureRecognizer:tap];
}

- (void) setUpNavBar {
    self.title = @"位置";
    self.navigationItem.leftBarButtonItem = [[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"返回"] style:UIBarButtonItemStylePlain target:self action:@selector(actionBack)];
    self.navigationItem.leftBarButtonItem.tintColor = [HelperUtil colorWithHexString:@"#352007"];
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithTitle:@"发送" style:UIBarButtonItemStylePlain target:self action:@selector(actionSendLocation)];
    self.navigationItem.rightBarButtonItem.tintColor = [HelperUtil colorWithHexString:@"#F59323"];
}

- (void) setUpUI {
    self.tableView.tableHeaderView = self.tableHeaderView;
    [self.tableHeaderView addSubview:self.searchBar];
    [self.tableHeaderView addSubview:self.mapView];
}


- (UIView *)tableHeaderView {
    if (!_tableHeaderView) {
        _tableHeaderView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, _screenWidth, 44 + 270)];
        _tableHeaderView.backgroundColor = [UIColor whiteColor];
    }
    return _tableHeaderView;
}

- (MKMapView *) mapView {
    if (!_mapView) {
        _mapView = [[MKMapView alloc] initWithFrame:CGRectMake(0, 45, _screenWidth, 270)];
        _mapView.delegate = self;
        _mapView.mapType = MKMapTypeStandard;
        _mapView.zoomEnabled = YES;
    }
    return _mapView;
}

- (UISearchBar *) searchBar {
    if (!_searchBar) {
        _searchBar = [[UISearchBar alloc] initWithFrame:CGRectMake(0, 0, _screenWidth, 44)];
        _searchBar.translucent = YES;
        _searchBar.delegate = self;
        _searchBar.placeholder = @"搜索地点";
        _searchBar.keyboardType = UIKeyboardTypeDefault;
        _searchBar.returnKeyType = UIReturnKeySearch;
    }
    return _searchBar;
}




- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

#pragma mark - MKMapViewDelegate
#pragma mark - MKMapViewDelegate


- (void)locationManager:(CLLocationManager *)manager didUpdateLocations:(NSArray *)locations {
    if (locations.count > 0) {
        CLLocation *location = [locations lastObject];
        self.locatedLocation = location;
        [self searchNearByRegion:location searchKey:nil];
        [self.locationManager stopUpdatingLocation];
        //        [self removeToLocation:location];
    }
}

- (void)mapView:(MKMapView *)mapView didFailToLocateUserWithError:(NSError *)error
{
    [self hideHud];
    if (error.code == 0) {
        UIAlertController *alert = [UIAlertController alertControllerWithTitle:nil
                                                                       message:[error.userInfo objectForKey:NSLocalizedRecoverySuggestionErrorKey]
                                                                preferredStyle:UIAlertControllerStyleAlert];
        
        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"确定"
                                                               style:UIAlertActionStyleCancel
                                                             handler:^(UIAlertAction * action) {
                                                                 
                                                             }];
        [alert addAction:cancelAction];
        [self presentViewController:alert animated:YES completion:nil];
    }
}

- (void)locationManager:(CLLocationManager *)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status
{
    switch (status) {
        case kCLAuthorizationStatusNotDetermined:
            if ([_locationManager respondsToSelector:@selector(requestAlwaysAuthorization)])
            {
                [_locationManager requestWhenInUseAuthorization];
            }
            break;
        case kCLAuthorizationStatusDenied:
        {
            
        }
        default:
            break;
    }
}

#pragma mark - public

- (void)startLocation
{
    [self.locationArray removeAllObjects];
    if([CLLocationManager locationServicesEnabled]) {
        if (!_locationManager) {
            _locationManager = [[CLLocationManager alloc] init];
            _locationManager.delegate = self;
            [_locationManager setDesiredAccuracy:kCLLocationAccuracyBestForNavigation];
            
            [_locationManager requestWhenInUseAuthorization];
        }
        // 开始时时定位
        [_locationManager startUpdatingLocation];
        [self showHudInView:self.view hint:@"正在定位..."];
    } else {
        //提示用户无法进行定位操作
        [SVProgressHUD showInfoWithStatus:@"请确认开启定位功能"];
    }
}

- (void) searchNearByRegion : (CLLocation *) location searchKey : (NSString *) searchKey {
    
    MKLocalSearchRequest * req = [[MKLocalSearchRequest alloc] init];
    if (location) {
        MKCoordinateRegion region = MKCoordinateRegionMakeWithDistance(location.coordinate, 500, 500);
        req.region=region;
    }
    
    if (searchKey == nil) {
        req.naturalLanguageQuery = @"place";
    } else {
        req.naturalLanguageQuery = searchKey;
    }
    
    MKLocalSearch * ser = [[MKLocalSearch alloc]initWithRequest:req];
    [ser startWithCompletionHandler:^(MKLocalSearchResponse *response, NSError *error) {
        NSArray * array = [NSArray arrayWithArray:response.mapItems];
        for (int i=0; i<array.count; i++) {
            MKMapItem * item=array[i];
            MKPointAnnotation * point = [[MKPointAnnotation alloc]init];
            point.title=item.name;
            point.subtitle=item.phoneNumber;
            point.coordinate=item.placemark.coordinate;
            [self.mapView addAnnotation:point];
        }
        [self.locationArray removeAllObjects];
        
        [self.locationArray addObjectsFromArray:array];
        
        if (self.locationArray.count > 0) {
            [self removeToMapItem:[self.locationArray firstObject]];
            _currentMapItem = [self.locationArray firstObject];
        }
        [self.tableView reloadData];
    }];
    [self hideHud];
}


-(void)createAnnotationWithCoords:(MKMapItem *) mapItem
{
    if (_annotation == nil) {
        _annotation = [[MKPointAnnotation alloc] init];
    }
    else{
        [_mapView removeAnnotation:_annotation];
    }
    _annotation.coordinate = mapItem.placemark.coordinate;
    [_mapView addAnnotation:_annotation];
}

- (void)removeToMapItem:(MKMapItem *) mapItem
{
    [self hideHud];
    
    _currentMapItem = mapItem;
    float zoomLevel = 0.01;
    MKCoordinateRegion region = MKCoordinateRegionMake(mapItem.placemark.coordinate, MKCoordinateSpanMake(zoomLevel, zoomLevel));
    [_mapView setRegion:[_mapView regionThatFits:region] animated:YES];
    
    if (_isSendLocation) {
        self.navigationItem.rightBarButtonItem.enabled = YES;
    }
    
    [self createAnnotationWithCoords:_currentMapItem];
}

#pragma mark - UITableViewDataSource
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return self.locationArray.count;
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"Location"];
    if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleSubtitle reuseIdentifier:@"Location"];
    }
    
    MKMapItem * item = self.locationArray[indexPath.row];
    CLPlacemark *placemark = item.placemark;
    cell.textLabel.text = item.name;
    cell.detailTextLabel.text =  [NSString stringWithFormat:@"%@ %@ %@ %@ %@ %@",
                                  placemark.country ? placemark.country : @"",
                                  placemark.administrativeArea ? placemark.administrativeArea : @"",
                                  placemark.locality ? placemark.locality : @"",
                                  placemark.subLocality ? placemark.subLocality : @"",
                                  placemark.thoroughfare ? placemark.thoroughfare : @"",
                                  placemark.subThoroughfare ? placemark.subThoroughfare : @""];
    if (item == self.currentMapItem) {
        cell.accessoryView = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"位置-选中"]];
    } else {
        cell.accessoryView = nil;
    }
    return cell;
}


- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [self.tableView deselectRowAtIndexPath:indexPath animated:YES];
    [self.searchBar endEditing:YES];
    MKMapItem * item= self.locationArray[indexPath.row];
    _currentMapItem = item;
    [self removeToMapItem:item];
    [self.tableView reloadData];
}

#pragma mark -  Action
- (void) actionSendLocation {
    if (_sendLocationInfo) {
        _sendLocationInfo(_currentMapItem.placemark.coordinate.latitude, _currentMapItem.placemark.coordinate.longitude, _currentMapItem.placemark.name);
    }
    [self.navigationController popViewControllerAnimated:YES];
}

- (void) actionBack {
    [self.navigationController popViewControllerAnimated:YES];
}

- (void) actionEndEditing {
    [self.searchBar endEditing:YES];
}

#pragma mark - UISearchBarDelegate
- (void)searchBarTextDidBeginEditing:(UISearchBar *)searchBar {
    [self.navigationController setNavigationBarHidden:YES animated:YES];
    [self.searchBar setShowsCancelButton:YES];
}

- (void)searchBarTextDidEndEditing:(UISearchBar *)searchBar {
    [self.navigationController setNavigationBarHidden:NO animated:YES];
    [self.searchBar setShowsCancelButton:NO];
}

- (void)searchBarSearchButtonClicked:(UISearchBar *)searchBar {
    [self searchNearByRegion : self.locatedLocation searchKey:searchBar.text];
    [self.searchBar resignFirstResponder];
}

- (void)searchBarCancelButtonClicked:(UISearchBar *)searchBar {
    self.searchBar.text = @"";
    [self actionEndEditing];
    [self searchNearByRegion : self.locatedLocation searchKey:nil];
}

@end
