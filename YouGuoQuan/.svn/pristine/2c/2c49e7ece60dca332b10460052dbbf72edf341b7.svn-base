//
//  MessageViewController.m
//  YouGuoQuan
//
//  Created by YM on 2016/11/11.
//  Copyright © 2016年 NT. All rights reserved.
//

#import "MessageViewController.h"

#import "FollowMessageViewController.h"
#import "CommentMessageViewController.h"
#import "PraiseMessageViewController.h"
#import "SystemMessageViewController.h"
#import "ChatViewController.h"
#import "RewardViewController.h"

#import "RecentSessionCell.h"
#import "MessageViewCell.h"

#import "EaseConversationModel.h"
#import "UserBaseInfoModel.h"
#import "EMClient.h"
#import "AlertViewTool.h"
#import "AuthorityTool.h"

@interface MessageViewController () <EMChatManagerDelegate>
@property (nonatomic, strong) NSArray *controllerArray;
@property (nonatomic, strong) NSMutableArray *dictArray;
@property (nonatomic, strong) NSMutableArray *dataArray;
@end

@implementation MessageViewController

#pragma mark -
#pragma mark - 懒加载
- (NSArray *)controllerArray {
    if (!_controllerArray) {
        _controllerArray = @[@"SystemMessageVC",
                             @"FollowMessageVC",
                             @"PraiseMessageVC",
                             @"CommentMessageVC"];
    }
    return _controllerArray;
}

- (NSMutableArray *)dictArray {
    if (!_dictArray) {
        _dictArray = [NSMutableArray arrayWithArray:@[@{@"icon":@"message_main_system",@"title":@"系统消息",@"count":@"0"},
                                                      @{@"icon":@"message_main_follow",@"title":@"关注",@"count":@"0"},
                                                      @{@"icon":@"message_main_praise",@"title":@"赞",@"count":@"0"},
                                                      @{@"icon":@"message_main_comment",@"title":@"评论",@"count":@"0"}]];
        ;
    }
    return _dictArray;
}

- (NSMutableArray *)dataArray {
    if (!_dataArray) {
        _dataArray = [NSMutableArray new];
    }
    return _dataArray;
}

#pragma mark -
#pragma mark - 系统方法
- (void)dealloc {
    NSLog(@"%s",__func__);
    [[EMClient sharedClient].chatManager removeDelegate:self];
    [[NSNotificationCenter defaultCenter] removeObserver:self];
}

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.navigationController.navigationBar.tintColor = FontColor;
    self.navigationController.navigationBar.barTintColor = NavBackgroundColor;
    [self.navigationController.navigationBar setTitleTextAttributes:[NSDictionary dictionaryWithObjectsAndKeys:FontColor,NSForegroundColorAttributeName,nil]];
    
    self.tableView.rowHeight = 66;
    self.tableView.backgroundColor = BackgroundColor;
    self.tabBarController.tabBar.backgroundColor = RGBA(255, 255, 255, 0.9);
    self.tableView.tableHeaderView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, WIDTH, CGFLOAT_MIN)];
    self.tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, WIDTH, CGFLOAT_MIN)];
    
    [[EMClient sharedClient].chatManager addDelegate:self];
    
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(updateUnreadMsgNumber)
                                                 name:@"kNotification_RefreshUnreadMagNumber"
                                               object:nil];
}

- (void)updateUnreadMsgNumber {
    if ([LoginData sharedLoginData].userId) {
//        [self requireData];
        [self getUnreadMessageNumber];
    }
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    
    NSLog(@"%s",__func__);
    if ([LoginData sharedLoginData].userId) {
        [self requireData];
    } else {
        self.tabBarController.selectedIndex = 0;
    }
}

- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
    
    if ([[UIDevice currentDevice].systemVersion floatValue] >= 6.0) {
        //需要注意的是self.isViewLoaded是必不可少的，其他方式访问视图会导致它加载，在WWDC视频也忽视这一点。
        if (self.isViewLoaded && !self.view.window) {// 是否是正在使用的视图
            // Add code to preserve data stored in the views that might be
            // needed later.
            // Add code to clean up other strong references to the view in
            // the view hierarchy.
            self.tableView = nil;// 目的是再次进入时能够重新加载调用viewDidLoad函数。
        }
    }
}

- (void)requireData {
    [self getUnreadMessageNumber];
    
    [self getConversationList];
}

- (void)getUnreadMessageNumber {
    __weak typeof(self) weakself = self;
    [NetworkTool getUnreadMessageNumberSuccess:^(id result){
        NSArray *infoArray = @[@{@"icon":@"message_main_system",@"title":@"系统消息",@"count":result[@"messageCount"]},
                               @{@"icon":@"message_main_follow",@"title":@"关注",@"count":result[@"focusMeCount"]},
                               @{@"icon":@"message_main_praise",@"title":@"赞",@"count":result[@"zanMeCount"]},
                               @{@"icon":@"message_main_comment",@"title":@"评论",@"count":result[@"commentMeCount"]}];
        weakself.dictArray = [NSMutableArray arrayWithArray:infoArray];
        
        [self.tableView beginUpdates];
        [self.tableView reloadSections:[NSIndexSet indexSetWithIndex:0] withRowAnimation:UITableViewRowAnimationNone];
        [self.tableView endUpdates];
        
        [weakself settingBadgeValue];
    } failure:nil];
}

- (void)getConversationList {
    [self.dataArray removeAllObjects];
    NSArray *conversations = [[EMClient sharedClient].chatManager getAllConversations];
    NSArray *sorted = [conversations sortedArrayUsingComparator:
                       ^(EMConversation *obj1, EMConversation* obj2){
                           EMMessage *message1 = [obj1 latestMessage];
                           EMMessage *message2 = [obj2 latestMessage];
                           if (message1.timestamp > message2.timestamp) {
                               return (NSComparisonResult) NSOrderedAscending;
                           } else {
                               return (NSComparisonResult) NSOrderedDescending;
                           }
                       }];
    [self.dataArray addObjectsFromArray:sorted];
    
    [self.tableView beginUpdates];
    [self.tableView reloadSections:[NSIndexSet indexSetWithIndex:1] withRowAnimation:UITableViewRowAnimationNone];
    [self.tableView endUpdates];
    
    [self settingBadgeValue];
}

#pragma mark - EMChatManagerDelegate
#pragma mark - 会话列表更新
- (void)conversationListDidUpdate:(NSArray *)aConversationList {
    if (self.dataArray.count) {
        for (EMConversation *conversation in aConversationList) {
            __weak typeof(self) weakself = self;
            [self.dataArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
                EMConversation *conObj = (EMConversation *)obj;
                if (![conObj.conversationId isEqualToString:conversation.conversationId]) {
                    [weakself.dataArray addObject:conversation];
                } else {
                    *stop = YES;
                }
            }];
        }
    } else {
        [self.dataArray addObjectsFromArray:aConversationList];
    }
    
    [self.dataArray sortUsingComparator:^NSComparisonResult(EMConversation *obj1, EMConversation *obj2) {
        EMMessage *message1 = [obj1 latestMessage];
        EMMessage *message2 = [obj2 latestMessage];
        if (message1.timestamp > message2.timestamp) {
            return (NSComparisonResult) NSOrderedAscending;
        } else {
            return (NSComparisonResult) NSOrderedDescending;
        }
    }];
    [self.tableView beginUpdates];
    [self.tableView reloadSections:[NSIndexSet indexSetWithIndex:1] withRowAnimation:UITableViewRowAnimationNone];
    [self.tableView endUpdates];
    
    [self settingBadgeValue];
}

#pragma mark - 接收到新消息
- (void)messagesDidReceive:(NSArray *)aMessages {
    __block NSMutableArray *indexArray = [NSMutableArray array];
    for (EMMessage *message in aMessages) {
        [self.dataArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
            EMConversation *conversation = (EMConversation *)obj;
            if ([message.conversationId isEqualToString:conversation.conversationId]) {
                EMError *error = nil;
                [conversation updateMessageChange:message error:&error];
                [indexArray addObject:[NSIndexPath indexPathForRow:idx inSection:1]];
                *stop = YES;
            }
        }];
    }
    [self.tableView beginUpdates];
    [self.tableView reloadRowsAtIndexPaths:indexArray withRowAnimation:UITableViewRowAnimationNone];
    [self.tableView endUpdates];
    
    [self settingBadgeValue];
}

#pragma mark - 设置未读消息数
- (void)settingBadgeValue {
    __block NSInteger unreadMsgCount = 0;
    [self.dataArray enumerateObjectsUsingBlock:^(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        EMConversation *concersation = (EMConversation *)obj;
        unreadMsgCount += [concersation unreadMessagesCount];
    }];
    
    for (NSDictionary *dict in self.dictArray) {
        unreadMsgCount += [dict[@"count"] integerValue];
    }
    
    UITabBarItem *item = self.tabBarController.tabBar.items[2];
    NSString *badgeValue = unreadMsgCount == 0 ? nil : [NSString stringWithFormat:@"%zd",unreadMsgCount];
    [item setBadgeValue:badgeValue];
    
    [[UIApplication sharedApplication] setApplicationIconBadgeNumber:unreadMsgCount];
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 2;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (section == 0) {
        return self.dictArray.count;
    } else {
        return self.dataArray.count;
    }
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    if (indexPath.section == 0) {
        MessageViewCell *cell = [tableView dequeueReusableCellWithIdentifier:@"MessageViewCell" forIndexPath:indexPath];
        cell.infoDict = self.dictArray[indexPath.row];
        return cell;
    } else {
        RecentSessionCell *cell = [tableView dequeueReusableCellWithIdentifier:@"RecentSessionCell" forIndexPath:indexPath];
        cell.conversationModel = self.dataArray[indexPath.row];
        return cell;
    }
}

#pragma mark - UITableView Delegate
- (nullable UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section {
    UIView *view = [[UIView alloc] initWithFrame:CGRectMake(0, 0, WIDTH, 36)];
    view.backgroundColor = BackgroundColor;
    UILabel *label = [[UILabel alloc] initWithFrame:CGRectMake(12, 0, WIDTH - 16 * 2, 36)];
    label.font = [UIFont systemFontOfSize:13];
    label.textColor = FontColor;
    label.text = @"最近联系人";
    [view addSubview:label];
    return view;
}

- (CGFloat)tableView:(UITableView *)tableView heightForHeaderInSection:(NSInteger)section {
    if (section == 1) {
        return self.dataArray.count ? 36 : 0;
    } else {
        return 0;
    }
}

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    if (indexPath.section == 1) {
        EMConversation *conversation = self.dataArray[indexPath.row];
        NSDictionary *userInfoDict = conversation.ext[Key_Conversation_Ext];
        BOOL isReward = [userInfoDict[@"isReward"] boolValue];
        __weak typeof(self) weakself = self;
        if ([LoginData sharedLoginData].audit == 1 ||
            [LoginData sharedLoginData].audit == 3 ||
            [LoginData sharedLoginData].isRecommend ||
            [LoginData sharedLoginData].star > 1 ||
            isReward) {
            [self pushToChatViewController:conversation];
        } else {
            [AuthorityTool chatPermissionDeniedFromViewController:self returnBlock:^{
                NSString *headImg = userInfoDict[@"headImg"];
                NSString *userID  = userInfoDict[@"userId"];
                [weakself rewardUserWithHeaderImageUrl:headImg rewardUserID:userID resetBlock:^{
                    [userInfoDict setValue:@1 forKey:@"isReward"];
                    [conversation.ext setValue:userInfoDict forKey:Key_Conversation_Ext];
                    [weakself.dataArray replaceObjectAtIndex:indexPath.row withObject:conversation];
                }];
            }];
        }
    } else {
        NSInteger totalUnReadMessage = 0;
        for (NSInteger i = 0; i < self.dictArray.count; i++) {
            if (i != indexPath.row) {
                NSDictionary *infoDict = self.dictArray[i];
                totalUnReadMessage += [infoDict[@"count"] integerValue];
            }
        }
        UITabBarItem *item = self.tabBarController.tabBar.items[2];
        NSString *badgeValue = totalUnReadMessage == 0 ? nil : [NSString stringWithFormat:@"%zd",totalUnReadMessage];
        [item setBadgeValue:badgeValue];
        
        UIStoryboard *messageSB = [UIStoryboard storyboardWithName:@"Message" bundle:nil];
        UIViewController *messageVC = [messageSB instantiateViewControllerWithIdentifier:self.controllerArray[indexPath.row]];
        messageVC.hidesBottomBarWhenPushed = YES;
        [self.navigationController pushViewController:messageVC animated:YES];
    }
}

#pragma mark - 跳官方认证界面
- (void)pushToOfficiallyCertifiedViewController {
    UIStoryboard *centerSB = [UIStoryboard storyboardWithName:@"Center" bundle:nil];
    UIViewController *ocVC = [centerSB instantiateViewControllerWithIdentifier:@"OfficiallyCertifiedVC"];
    ocVC.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:ocVC animated:YES];
}

- (void)pushToChatViewController:(EMConversation *)conversation {
    ChatViewController *chatController = [[ChatViewController alloc] initWithConversation:conversation];
    chatController.hidesBottomBarWhenPushed = YES;
    [self.navigationController pushViewController:chatController animated:YES];
}

- (void)rewardUserWithHeaderImageUrl:(NSString *)headImg rewardUserID:(NSString *)userId resetBlock:(void (^)())reset {
    UIStoryboard *otherSB = [UIStoryboard storyboardWithName:@"Other" bundle:nil];
    RewardViewController *rewardVC = [otherSB instantiateViewControllerWithIdentifier:@"Reward"];
    rewardVC.modalPresentationStyle = UIModalPresentationOverCurrentContext;
    rewardVC.headImg = headImg;
    rewardVC.userID  = userId;
    rewardVC.rType   = @"ds";
    rewardVC.payRewardSucess = ^(CGFloat amount, NSString *payType) {
        if (reset) {
            reset();
        }
    };
    [self.tabBarController presentViewController:rewardVC animated:YES completion:nil];
}


@end
